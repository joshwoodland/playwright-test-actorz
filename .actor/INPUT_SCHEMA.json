{
    "title": "Playwright Test",
    "description": "Playwright Test automates end-to-end web tests across all modern browsers. This actor runs Playwright Test in the cloud and stores the results in the Apify platform.",
    "type": "object",
    "schemaVersion": 1,
    "properties": {
        "testCode": {
            "title": "Test suite code",
            "type": "string",
            "description": "Contents of the test suite file. Environment variables EMAIL and PASSWORD are available during the run.",
            "editor": "javascript",
            "prefill": "import { test, expect } from '@playwright/test';\n\n// Access environment variables\nconst email = process.env.EMAIL;\nconst password = process.env.PASSWORD;\nconst patientName = process.env.PATIENT_NAME;\nconst medications = process.env.MEDICATIONS;\n\ntest('login and check patient', async ({ page }) => {\n    // Navigate to the login page\n    await page.goto('https://your-healthcare-site.com/login');\n\n    // Use the environment variables for login\n    await page.fill('#email', email);\n    await page.fill('#password', password);\n    await page.click('#login-button');\n\n    // Verify login success\n    await expect(page.locator('.user-profile')).toBeVisible();\n\n    // Check patient details\n    await page.goto(`https://your-healthcare-site.com/patients/${patientName}`);\n    await expect(page.locator('.patient-name')).toHaveText(patientName);\n    \n    // Verify medications if available\n    if (medications) {\n        const medList = medications.split(', ');\n        for (const med of medList) {\n            await expect(page.locator('.medications-list')).toContainText(med);\n        }\n    }\n});",
            "sectionCaption": "Basic settings"
        },
        "screenWidth": {
            "title": "Screen width",
            "type": "integer",
            "description": "Screen width in pixels. Default is `1280`.",
            "default": 1280,
            "sectionCaption": "Browser settings"
        },
        "screenHeight": {
            "title": "Screen height",
            "type": "integer",
            "description": "Screen height in pixels. Default is `720`.",
            "default": 720
        },
        "headful": {
            "title": "Run in headful mode",
            "type": "boolean",
            "description": "Runs tests in headful mode. Default is `false`.",
            "default": false
        },
        "darkMode": {
            "title": "Dark mode?",
            "type": "boolean",
            "description": "Run tests in dark mode. Default is `false`.",
            "default": false
        },
        "locale": {
            "type": "string",
            "title": "Locale",
            "description": "Locale to use for the test. Default is `en-US`.",
            "editor": "select",
            "default": "en-US",
            "enum": ["en-US", "es-ES", "fr-FR", "de-DE"],
            "enumTitles": ["English (US)", "Spanish (Spain)", "French (France)", "German (Germany)"]
        },
        "timeout": {
            "title": "Timeout",
            "type": "integer",
            "description": "Maximum runtime for the test suite (in seconds). Default is `60`.",
            "default": 60,
            "sectionCaption": "Advanced settings"
        },
        "video": {
            "title": "Record video",
            "type": "string",
            "enum": ["on", "off", "retain-on-failure", "on-first-retry"],
            "default": "on",
            "enumTitles": ["Always", "Never", "Retain on failure", "On first retry"],
            "description": "Record video of the test run."
        },
        "patientName": {
            "title": "Patient Name",
            "type": "string",
            "description": "The name of the patient to process.",
            "editor": "textfield"
        },
        "medications": {
            "title": "Medications",
            "type": "array",
            "description": "A list of medications prescribed to the patient.",
            "editor": "stringList",
            "prefill": []
        }
    },
    "required": []
}
