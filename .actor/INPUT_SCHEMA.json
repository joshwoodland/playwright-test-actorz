{
    "title": "Playwright Test",
    "description": "Playwright Test automates end-to-end web tests across all modern browsers. This actor runs Playwright Test in the cloud and stores the results in the Apify platform.",
    "type": "object",
    "schemaVersion": 1,
    "properties": {
        "email": {
            "title": "Email",
            "type": "string",
            "description": "Email for login (can also be set via environment variables)",
            "editor": "textfield",
            "sectionCaption": "Login Credentials"
        },
        "password": {
            "title": "Password",
            "type": "string",
            "description": "Password for login (can also be set via environment variables)",
            "editor": "textfield",
            "isSecret": true
        },
        "apiEndpoint": {
            "title": "API Endpoint",
            "type": "string",
            "description": "The HTTP endpoint to fetch patient data from",
            "editor": "textfield",
            "default": "https://your-api.com/patients",
            "sectionCaption": "API Configuration"
        },
        "testCode": {
            "title": "Test suite code",
            "type": "string",
            "description": "Contents of the test suite file. Environment variables EMAIL, PASSWORD, API_ENDPOINT are available during the run.",
            "editor": "javascript",
            "prefill": "import { test, expect } from '@playwright/test';\n\nasync function getPatientData() {\n    const response = await fetch(process.env.API_ENDPOINT);\n    if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n}\n\ntest('Dynamic patient data automation', async ({ page }) => {\n    // 📥 1. Get dynamic data from API\n    const patientData = await getPatientData();\n    console.log('Patient data received:', patientData);\n\n    // 🔐 2. Log in\n    await page.goto('https://www.simplepractice.com');\n    await page.click('text=Sign In');\n    await page.fill('input[name=\"email\"]', process.env.EMAIL);\n    await page.fill('input[name=\"password\"]', process.env.PASSWORD);\n    await page.click('button[type=\"submit\"]');\n\n    // ✅ 3. Use dynamic patient data\n    await page.goto(`https://secure.simplepractice.com/patients/${patientData.patientId}`);\n    \n    // Verify patient name\n    await expect(page.locator('.patient-name')).toHaveText(patientData.name);\n\n    // Check medications\n    if (patientData.medications && patientData.medications.length > 0) {\n        for (const med of patientData.medications) {\n            await expect(page.locator('.medications-list')).toContainText(med);\n        }\n    }\n\n    // 📸 4. Take evidence screenshots\n    await page.screenshot({ path: 'patient-details.png' });\n});",
            "sectionCaption": "Basic settings"
        },
        "screenWidth": {
            "title": "Screen width",
            "type": "integer",
            "description": "Screen width in pixels. Default is `1280`.",
            "default": 1280,
            "sectionCaption": "Browser settings"
        },
        "screenHeight": {
            "title": "Screen height",
            "type": "integer",
            "description": "Screen height in pixels. Default is `720`.",
            "default": 720
        },
        "headful": {
            "title": "Run in headful mode",
            "type": "boolean",
            "description": "Runs tests in headful mode. Default is `false`.",
            "default": false
        },
        "darkMode": {
            "title": "Dark mode?",
            "type": "boolean",
            "description": "Run tests in dark mode. Default is `false`.",
            "default": false
        },
        "locale": {
            "type": "string",
            "title": "Locale",
            "description": "Locale to use for the test. Default is `en-US`.",
            "editor": "select",
            "default": "en-US",
            "enum": ["en-US", "es-ES", "fr-FR", "de-DE"],
            "enumTitles": ["English (US)", "Spanish (Spain)", "French (France)", "German (Germany)"]
        },
        "timeout": {
            "title": "Timeout",
            "type": "integer",
            "description": "Maximum runtime for the test suite (in seconds). Default is `60`.",
            "default": 60,
            "sectionCaption": "Advanced settings"
        },
        "memory": {
            "title": "Memory (MB)",
            "type": "integer",
            "description": "Amount of memory in megabytes. Default is `8192` (8GB).",
            "default": 8192,
            "minimum": 4096,
            "maximum": 32768
        },
        "video": {
            "title": "Record video",
            "type": "string",
            "enum": ["on", "off", "retain-on-failure", "on-first-retry"],
            "default": "on",
            "enumTitles": ["Always", "Never", "Retain on failure", "On first retry"],
            "description": "Record video of the test run."
        },
        "patientName": {
            "title": "Patient Name",
            "type": "string",
            "description": "The name of the patient to process.",
            "editor": "textfield"
        },
        "medications": {
            "title": "Medications",
            "type": "array",
            "description": "A list of medications prescribed to the patient.",
            "editor": "stringList",
            "prefill": []
        }
    },
    "required": ["apiEndpoint"]
}
